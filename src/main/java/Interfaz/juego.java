/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaz;

import Escalera.escalera;
import Serpiente.Serpiente;
import Usuario.usuario;
import java.awt.BasicStroke;
import static java.awt.BasicStroke.CAP_ROUND;
import static java.awt.BasicStroke.JOIN_ROUND;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.geom.CubicCurve2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import static java.lang.Math.max;
import static java.lang.Math.min;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author alexis
 */
public class juego extends javax.swing.JFrame {

    /**
     * Creates new form jueggo
     */
    public juego() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        StandardGameScreen = new javax.swing.JPanel();
        StandardGamePanel = new javax.swing.JPanel();
        CreateStandardBoard = new javax.swing.JButton();
        RollDice = new javax.swing.JButton();
        StandardDiceLabel = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        StandardGameScreen.setBackground(new java.awt.Color(102, 102, 255));
        StandardGameScreen.setPreferredSize(new java.awt.Dimension(1000, 700));

        StandardGamePanel.setBackground(new java.awt.Color(255, 255, 255));
        StandardGamePanel.setForeground(new java.awt.Color(255, 255, 255));
        StandardGamePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                StandardGamePanelMouseEntered(evt);
            }
        });

        javax.swing.GroupLayout StandardGamePanelLayout = new javax.swing.GroupLayout(StandardGamePanel);
        StandardGamePanel.setLayout(StandardGamePanelLayout);
        StandardGamePanelLayout.setHorizontalGroup(
            StandardGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 810, Short.MAX_VALUE)
        );
        StandardGamePanelLayout.setVerticalGroup(
            StandardGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 688, Short.MAX_VALUE)
        );

        CreateStandardBoard.setText("inicio");
        CreateStandardBoard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateStandardBoardActionPerformed(evt);
            }
        });

        RollDice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RollDiceActionPerformed(evt);
            }
        });

        StandardDiceLabel.setBackground(new java.awt.Color(255, 255, 255));
        StandardDiceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jButton2.setText("Regreso");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout StandardGameScreenLayout = new javax.swing.GroupLayout(StandardGameScreen);
        StandardGameScreen.setLayout(StandardGameScreenLayout);
        StandardGameScreenLayout.setHorizontalGroup(
            StandardGameScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StandardGameScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(StandardGamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addGroup(StandardGameScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(StandardGameScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(RollDice, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                        .addComponent(CreateStandardBoard)
                        .addComponent(StandardDiceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jButton2))
                .addGap(30, 30, 30))
        );
        StandardGameScreenLayout.setVerticalGroup(
            StandardGameScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StandardGameScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(StandardGameScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(StandardGameScreenLayout.createSequentialGroup()
                        .addComponent(StandardGamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(StandardGameScreenLayout.createSequentialGroup()
                        .addComponent(CreateStandardBoard)
                        .addGap(289, 289, 289)
                        .addComponent(RollDice, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addComponent(StandardDiceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addGap(65, 65, 65))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1019, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(StandardGameScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 1019, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(StandardGameScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void StandardGamePanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_StandardGamePanelMouseEntered
        // TODO add your handling code here:
         DrawPlayers();
        
    }//GEN-LAST:event_StandardGamePanelMouseEntered

    private void CreateStandardBoardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateStandardBoardActionPerformed
          IniializeIcons();
          
          try {
        usuarioss = new usuario[numOfPlayers];
        if (interfazjugador.jugadoresCantidad == 1) {
            usuarioss[0] = new usuario(1,Seleccion.nombresArreglo[0], Seleccion.nombresArreglo[0],Color.RED);
        } else if (interfazjugador.jugadoresCantidad  == 2) {
            usuarioss[0] = new usuario(1,Seleccion.nombresArreglo[0], Seleccion.nombresArreglo[0],Color.RED);
            usuarioss[1] = new usuario(2,Seleccion.nombresArreglo[1], Seleccion.nombresArreglo[1], Color.MAGENTA);
        } else if (interfazjugador.jugadoresCantidad  == 3) {
            usuarioss[0] = new usuario(1,Seleccion.nombresArreglo[0], Seleccion.nombresArreglo[0],Color.RED);
            usuarioss[1] = new usuario(2,Seleccion.nombresArreglo[1], Seleccion.nombresArreglo[1], Color.MAGENTA);
            usuarioss[2] = new usuario(3,Seleccion.nombresArreglo[2], Seleccion.nombresArreglo[2], Color.BLUE);
         } else if (interfazjugador.jugadoresCantidad  == 4) {
            usuarioss[0] = new usuario(1,Seleccion.nombresArreglo[0], Seleccion.nombresArreglo[0],Color.RED);
            usuarioss[1] = new usuario(2,Seleccion.nombresArreglo[1], Seleccion.nombresArreglo[1], Color.MAGENTA);
            usuarioss[2] = new usuario(3,Seleccion.nombresArreglo[2], Seleccion.nombresArreglo[2], Color.BLUE);
            usuarioss[3] = new usuario(4,Seleccion.nombresArreglo[3], Seleccion.nombresArreglo[3], Color.ORANGE);
        } else if (interfazjugador.jugadoresCantidad  == 5) {
            usuarioss[0] = new usuario(1,Seleccion.nombresArreglo[0], Seleccion.nombresArreglo[0],Color.RED);
            usuarioss[1] = new usuario(2,Seleccion.nombresArreglo[1], Seleccion.nombresArreglo[1], Color.MAGENTA);
            usuarioss[2] = new usuario(3,Seleccion.nombresArreglo[2], Seleccion.nombresArreglo[2], Color.BLUE);
            usuarioss[3] = new usuario(4,Seleccion.nombresArreglo[3], Seleccion.nombresArreglo[3], Color.ORANGE);            
            usuarioss[4] = new usuario(5,Seleccion.nombresArreglo[4], Seleccion.nombresArreglo[4], Color.PINK);

            
        }else if (interfazjugador.jugadoresCantidad  == 6) {
            usuarioss[0] = new usuario(1,Seleccion.nombresArreglo[0], Seleccion.nombresArreglo[0],Color.RED);
            usuarioss[1] = new usuario(2,Seleccion.nombresArreglo[1], Seleccion.nombresArreglo[1], Color.MAGENTA);
            usuarioss[2] = new usuario(3,Seleccion.nombresArreglo[2], Seleccion.nombresArreglo[2], Color.BLUE);
            usuarioss[3] = new usuario(4,Seleccion.nombresArreglo[3], Seleccion.nombresArreglo[3], Color.ORANGE);            
            usuarioss[4] = new usuario(5,Seleccion.nombresArreglo[4], Seleccion.nombresArreglo[4], Color.PINK);
            usuarioss[5] = new usuario(6,Seleccion.nombresArreglo[5], Seleccion.nombresArreglo[5], Color.YELLOW);
        } else {
            JOptionPane.showMessageDialog(null, "error");
        }
        gfx = (Graphics2D) StandardGamePanel.getGraphics();
        Snakes = new Serpiente[8 * 8];
        Ladders = new escalera[8 * 8];
        MakeSnake(17, 2);
        MakeSnake(26, 13);
        MakeSnake(63, 32);
        MakeSnake(59, 40);
        MakeSnake(47, 20);
        MakeLadder(23, 6);
        MakeLadder(3, 28);
        MakeLadder(24, 51);
        MakeLadder(39, 60);
        MakeLadder(43, 56);
        DrawPlayers();
        moves = 0;
     
              
              
          } catch(Exception ex) {
               JOptionPane.showMessageDialog(null, "error");
          }
          
        
    }//GEN-LAST:event_CreateStandardBoardActionPerformed

    private void RollDiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RollDiceActionPerformed
        // TODO add your handling code here:
        GameControl();
        RollDice.setText(usuarioss[moves % numOfPlayers].getNombre() + " Play");
    }//GEN-LAST:event_RollDiceActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        interfaz regreso = new interfaz();
        regreso.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    
    private void IniializeIcons(){
        for(int i=0;i<6;i++){
            icons[i]=new ImageIcon("dice"+Integer.toString(i+1)+".png");
        }
    }
    
    private void setIcon(int i){
        StandardDiceLabel.setIcon(icons[i-1]);
       // CustomDiceLabel.setIcon(icons[i-1]);
    }
    
     private boolean GameNotDone() {
        for (int i = 0; i < numOfPlayers; i++) {
            if (usuarioss[i].getPosition() == Customboardlength * Customboardheight) {
                return false;
            }
        }
        return true;
    }
     
       private void DrawPlayers() {
        DrawGrid();
        DrawAllSnakes();
        DrawAllLadders();
        Point2D p;
        for (int i = 0; i < numOfPlayers; i++) {
            p = StandardCell(usuarioss[i].getPosition());
           gfx.setColor(usuarioss[i].getC());
            gfx.fill(new Ellipse2D.Double(p.getX() + (Customboxsize * (i + 1)) / 4, p.getY() + (Customboxsize / 2), (Customboxsize / 5), (Customboxsize / 5)));
        }
       RollDice.setText(usuarioss[moves % numOfPlayers].getNombre() + " Play");
        //RollDice2.setText(usuarioss[moves % numOfPlayers].getNombre() + " Play");
    }
       
       
      
           private void GameControl(){
        if (GameNotDone()) {
            int d=usuarioss[moves % numOfPlayers].play(Customboardlength, Customboardheight, Snakes, Ladders);
            setIcon(d);
            DrawPlayers();
            moves++;
        } if (GameNotDone());else {
            moves--;
            int flag=0;
            String a,b=usuarioss[moves % numOfPlayers].getNombre();
            JOptionPane.showMessageDialog(null, usuarioss[moves % numOfPlayers].getNombre()+ " Termino el juego en: " + Integer.toString(usuarioss[moves % numOfPlayers].getPartidasGanadas()) + " movimientos");
            for(int i=0;i<Winners.size();i++){
                a = ((usuario)Winners.get(i)).getNombre();
                if(a.equals(b)){
                    flag=1;
                    if(((usuario)Winners.get(i)).getPartidasGanadas()> usuarioss[moves % numOfPlayers].getPartidasGanadas()){
                        JOptionPane.showMessageDialog(null,"You beat your previous best score of "+Integer.toString(((usuario)Winners.get(i)).getPartidasGanadas()));
                        ((usuario)Winners.get(i)).setPartidasGanadas(usuarioss[moves % numOfPlayers].getPartidasGanadas());
                        break;
                    }
                }
            }
            if(flag==0){
                usuarioss[moves % numOfPlayers].setPartidasGanadas(usuarioss[moves % numOfPlayers].getPartidasGanadas());
                Winners.add(usuarioss[moves % numOfPlayers]);               
            }
        }
    }
    
    private void DrawGrid() {
        gfx.setStroke(new BasicStroke(2,CAP_ROUND, JOIN_ROUND));
        Point2D.Float p=new Point2D.Float();
        int n;
        for (int i = 20; i < Customboardlength * Customboxsize; i += Customboxsize) {
            for (int j = 20; j < Customboardheight * Customboxsize; j += Customboxsize) {
                gfx.setColor(Color.green);
                gfx.fillRect(i, j, Customboxsize, Customboxsize);
                gfx.setColor(Color.BLACK);
                gfx.drawRect(i, j, Customboxsize, Customboxsize);
                p.x=i+10;p.y=j+10;
                n=Findcell(p);
                gfx.drawString(Integer.toString(n),i+Customboxsize/4, j+Customboxsize/4);
            }
        }
    }
    
    private void MakeLadder(int a, int b) {
        if (min(a, b) != 1 && Ladders[a - 1] == null && Ladders[b - 1] == null && Snakes[a - 1] == null && Snakes[b - 1] == null) {
          Ladders[min(a, b) - 1] = new escalera(a, b);
            DrawLadder(a, b);
        } else {

            JOptionPane.showMessageDialog(null, "Una serpiente o escalera ya esta es esta posicion");
            DrawPlayers();
        }
    }

    private void MakeSnake(int a, int b) {
        if (max(a, b) != Customboardlength * Customboardheight && Ladders[a - 1] == null && Ladders[b - 1] == null && Snakes[a - 1] == null && Snakes[b - 1] == null) {
           Snakes[max(a, b) - 1] = new Serpiente(a, b);
            DrawSnake(a, b);
        } else {

            JOptionPane.showMessageDialog(null, "Una serpiente o escalera ya esta es esta posicion");
            DrawPlayers();
        }
    }

    private void DrawLadder(int a, int b) {
        gfx.setColor(Color.yellow);
        gfx.setStroke(new BasicStroke(5, CAP_ROUND, JOIN_ROUND));
        Point2D.Float s = StandardCell(a);
        Point2D.Float r = StandardCell(b);
        s.x += Customboxsize / 4;
        s.y += Customboxsize / 2;
        r.x += Customboxsize / 4;
        r.y += Customboxsize / 2;
        gfx.draw(new Line2D.Float(s, r));
        for (int i = 1; i < 5; i++) {
            int x = (int) ((r.x * i + s.x * (5 - i)) / 5);
            int y = (int) ((r.y * i + s.y * (5 - i)) / 5);
            gfx.drawLine(x, y, x + Customboxsize / 2, y);
        }
        s.x += Customboxsize / 2;
        r.x += Customboxsize / 2;
        gfx.draw(new Line2D.Float(s, r));
    }

    private void DrawSnake(int a, int b) {
        gfx.setColor(Color.GRAY);
        gfx.setStroke(new BasicStroke(10, CAP_ROUND, JOIN_ROUND));
        Point2D.Float s = StandardCell(a);
        Point2D.Float r = StandardCell(b);
        s.x += Customboxsize / 2;
        s.y += Customboxsize / 2;
        r.x += Customboxsize / 2;
        r.y += Customboxsize / 2;
        CubicCurve2D.Float q = new CubicCurve2D.Float();
        for (int i = 0; i < 5; i++) {
            int x1 = (int) ((r.x * i + s.x * (5 - i)) / 5);
            int y1 = (int) ((r.y * i + s.y * (5 - i)) / 5);
            int x2 = (int) ((r.x * (i + 1) + s.x * (4 - i)) / 5);
            int y2 = (int) ((r.y * (i + 1) + s.y * (4 - i)) / 5);
            q.setCurve(x1, y1, x1, y2, x2, y1, x2, y2);
            gfx.draw(q);
        }
    }

    private void DrawAllSnakes() {
        for (int i = 0; i < (Customboardlength * Customboardheight); i++) {
            if (Snakes[i] != null) {
              DrawSnake(Snakes[i].boca, Snakes[i].cola);
            }
        }
    }

    private void DrawAllLadders() {
        for (int i = 0; i < (Customboardlength * Customboardheight); i++) {
            if (Ladders[i] != null) {
              DrawLadder(Ladders[i].boca, Ladders[i].cola);
            }
        }
    }

    private Point2D.Float StandardCell(int n) {
        Point2D.Float p = new Point2D.Float();
        if ((n % (2 * Customboardlength)) >= 1 && (n % (2 * Customboardlength) <= Customboardlength)) {
            p.x = 20 + ((n - 1) % Customboardlength) * Customboxsize;
        } else {
            if ((n % (2 * Customboardlength)) == 0) {
                p.x = 20;
            } else {
                p.x = 20 + (Customboardlength - (n - Customboardlength) % Customboardlength) * Customboxsize;
            }
        }
        p.y = 20 + (Customboardheight - (((int) ((n - 1) / Customboardlength)) + 1)) * Customboxsize;
        return p;
    }

    private int Findcell(Point2D point) {
        int x = (int) ((point.getX() - 20) / Customboxsize) + 1;
        int y = (int) ((point.getY() - 20) / Customboxsize) + 1;
        if ((Customboardheight - y) % 2 == 0) {
            return (Customboardheight - y) * Customboardlength + x;
        } else {
            return (Customboardheight - y) * Customboardlength - x + 1 + Customboardlength;
        }
    }
    
    
     interfaz interfazjugador = new interfaz();
     Seleccion nombres = new Seleccion();
     
      private ImageIcon[] icons = new ImageIcon[6];
    private ArrayList Winners;
    private int numOfPlayers = interfazjugador.jugadoresCantidad;
    private Graphics2D gfx;
    private Point2D start;
    private Point2D end;
    private int Customboardlength = 8;
    private int Customboardheight = 8;
    private int Customboxsize = 80;
    private escalera[] Ladders;
    private Serpiente[] Snakes;
    private usuario[] usuarioss;
    private int moves = 0;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CreateStandardBoard;
    private javax.swing.JButton RollDice;
    private javax.swing.JLabel StandardDiceLabel;
    private javax.swing.JPanel StandardGamePanel;
    private javax.swing.JPanel StandardGameScreen;
    private javax.swing.JButton jButton2;
    // End of variables declaration//GEN-END:variables
}
